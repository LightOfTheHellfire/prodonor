// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prodonor.Infrastructure;

namespace Prodonor.Infrastructure.Migrations
{
    [DbContext(typeof(ProdonorDbContext))]
    partial class ProdonorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Prodonor.Infrastructure.Model.CarrierDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("PriceForMile");

                    b.HasKey("Id");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.CarrierLocationDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarrierId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId")
                        .IsUnique();

                    b.ToTable("CarrierLocations");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.CompanyDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.CompanyRolesDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("CompanyRoles");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.DeliveryDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("DeliveryTime");

                    b.Property<int>("OrderId");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.LocationDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StoreId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.OrderDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("UserDaoId");

                    b.HasKey("Id");

                    b.HasIndex("UserDaoId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.OrderToProductDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderToProductDao");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.ProductCategoryDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Optical Mouse"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Laser Mouse"
                        });
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.ProductDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name");

                    b.Property<string>("Price");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.RoleDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.StoreDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.StoreRolesDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreRoles");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.UserCompanyRolesDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyRolesId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRolesId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCompanyRoles");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.UserDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.UserStoreRolesDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StoreRolesId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StoreRolesId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStoreRoles");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.CarrierLocationDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.CarrierDao", "Carrier")
                        .WithOne("Location")
                        .HasForeignKey("Prodonor.Infrastructure.Model.CarrierLocationDao", "CarrierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.CompanyRolesDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.CompanyDao", "Company")
                        .WithMany("CompanyRoles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prodonor.Infrastructure.Model.RoleDao", "Role")
                        .WithMany("CompanyRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.DeliveryDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.OrderDao", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.LocationDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.StoreDao", "Store")
                        .WithOne("Location")
                        .HasForeignKey("Prodonor.Infrastructure.Model.LocationDao", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.OrderDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.UserDao")
                        .WithMany("Orders")
                        .HasForeignKey("UserDaoId");
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.OrderToProductDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.OrderDao", "Order")
                        .WithMany("OrderToProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prodonor.Infrastructure.Model.ProductDao", "Product")
                        .WithMany("OrderToProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.ProductDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.ProductCategoryDao", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prodonor.Infrastructure.Model.StoreDao", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.StoreDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.CompanyDao", "Company")
                        .WithMany("Stores")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.StoreRolesDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.RoleDao", "Role")
                        .WithMany("StoreRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prodonor.Infrastructure.Model.StoreDao", "Store")
                        .WithMany("StoreRoles")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.UserCompanyRolesDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.CompanyRolesDao", "CompanyRoles")
                        .WithMany("UserCompanyRoles")
                        .HasForeignKey("CompanyRolesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prodonor.Infrastructure.Model.UserDao", "User")
                        .WithMany("UserCompanyRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prodonor.Infrastructure.Model.UserStoreRolesDao", b =>
                {
                    b.HasOne("Prodonor.Infrastructure.Model.StoreRolesDao", "StoreRoles")
                        .WithMany("UserStoreRoles")
                        .HasForeignKey("StoreRolesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prodonor.Infrastructure.Model.UserDao", "User")
                        .WithMany("UserStoreRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
